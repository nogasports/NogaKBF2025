openapi: 3.0.0
info:
  title: Kenya Basketball Federation API
  version: 1.0.0
  description: API documentation for the Kenya Basketball Federation management system

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.kbf.co.ke/api
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, team, official, player, fan]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Team:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        logo:
          type: string
          format: uri
        division:
          type: string
        homeVenue:
          type: string
        foundedYear:
          type: integer
        isActive:
          type: boolean
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'

    Player:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        jerseyNumber:
          type: string
        position:
          type: string
          enum: [POINT_GUARD, SHOOTING_GUARD, SMALL_FORWARD, POWER_FORWARD, CENTER]
        dateOfBirth:
          type: string
          format: date
        nationality:
          type: string
        height:
          type: string
        weight:
          type: string
        teamId:
          type: string
          format: uuid
        status:
          type: string
          enum: [active, injured, suspended]

paths:
  /auth/login:
    post:
      summary: User login
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                userType:
                  type: string
                  enum: [admin, team, official, player, fan]
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /teams:
    get:
      summary: Get all teams
      tags: [Teams]
      parameters:
        - in: query
          name: division
          schema:
            type: string
        - in: query
          name: isActive
          schema:
            type: boolean
      responses:
        '200':
          description: List of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'

    post:
      summary: Create a new team
      tags: [Teams]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'

  /matches:
    get:
      summary: Get all matches
      tags: [Matches]
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [scheduled, live, completed, postponed, cancelled]
        - in: query
          name: teamId
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of matches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'

  /players:
    get:
      summary: Get all players
      tags: [Players]
      parameters:
        - in: query
          name: teamId
          schema:
            type: string
            format: uuid
        - in: query
          name: status
          schema:
            type: string
            enum: [active, injured, suspended]
      responses:
        '200':
          description: List of players
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'